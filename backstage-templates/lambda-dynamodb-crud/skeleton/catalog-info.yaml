apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.projectName }}
  title: ${{ values.projectName | title }}
  description: ${{ values.description }}
  annotations:
    github.com/project-slug: ${{ values.destination.owner }}/${{ values.destination.repo }}
    backstage.io/techdocs-ref: dir:.
  tags:
    - aws
    - lambda
    - dynamodb
    - crud
    - ${{ values.entityName | lower }}
  links:
    - url: https://github.com/${{ values.destination.owner }}/${{ values.destination.repo }}
      title: Repository
      icon: github
    - url: https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions/${{ values.functionName }}
      title: AWS Lambda Console
      icon: cloud
    - url: https://console.aws.amazon.com/dynamodb/home?region=us-east-1#tables:selected=${{ values.tableName }}
      title: DynamoDB Table
      icon: storage
spec:
  type: service
  owner: group:development
  lifecycle: experimental
  system: ${{ values.entityName | lower }}-management
  providesApis:
    - ${{ values.projectName }}-api
---
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: ${{ values.projectName }}-api
  title: ${{ values.projectName | title }} API
  description: API REST para operaciones CRUD de ${{ values.entityName }}
  tags:
    - rest
    - crud
    - ${{ values.entityName | lower }}
spec:
  type: openapi
  lifecycle: experimental
  owner: group:development
  system: ${{ values.entityName | lower }}-management
  definition: |
    openapi: 3.0.0
    info:
      title: ${{ values.projectName | title }} API
      description: API para operaciones CRUD de ${{ values.entityName }}
      version: 1.0.0
    servers:
      - url: http://localhost:3002
        description: Local development server
    paths:
      ${{ values.baseEndpoint }}:
        get:
          summary: Obtener lista de ${{ values.entityName | lower }}s
          parameters:
            - name: ${{ values.pkAttribute }}
              in: query
              schema:
                type: string
          responses:
            '200':
              description: Lista de ${{ values.entityName | lower }}s
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            ${{ values.pkAttribute }}:
                              type: string
                            ${{ values.skAttribute }}:
                              type: string
                            name:
                              type: string
                            id:
                              type: string
                      count:
                        type: number
        post:
          summary: Crear nuevo ${{ values.entityName | lower }}
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  required:
                    - ${{ values.pkAttribute }}
                    - ${{ values.skAttribute }}
                    - name
                  properties:
                    ${{ values.pkAttribute }}:
                      type: string
                      example: "${{ values.entityName | upper }}#123"
                    ${{ values.skAttribute }}:
                      type: string
                      example: "METADATA"
                    name:
                      type: string
                      example: "Example ${{ values.entityName }}"
                    description:
                      type: string
                      example: "Description of the ${{ values.entityName | lower }}"
          responses:
            '201':
              description: ${{ values.entityName }} creado exitosamente
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      ${{ values.pkAttribute }}:
                        type: string
                      ${{ values.skAttribute }}:
                        type: string
                      id:
                        type: string
                      name:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
            '400':
              description: Datos inv√°lidos
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      error:
                        type: string
                      message:
                        type: string
      ${{ values.baseEndpoint }}/{id}:
        get:
          summary: Obtener ${{ values.entityName | lower }} por ID
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
              example: "123"
          responses:
            '200':
              description: ${{ values.entityName }} encontrado
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      ${{ values.pkAttribute }}:
                        type: string
                      ${{ values.skAttribute }}:
                        type: string
                      id:
                        type: string
                      name:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
            '404':
              description: ${{ values.entityName }} no encontrado
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      error:
                        type: string
                        example: "NotFound"
                      message:
                        type: string
                        example: "${{ values.entityName }} not found"
        put:
          summary: Actualizar ${{ values.entityName | lower }} existente
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
              example: "123"
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Updated ${{ values.entityName }}"
                    description:
                      type: string
                      example: "Updated description"
          responses:
            '200':
              description: ${{ values.entityName }} actualizado exitosamente
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      ${{ values.pkAttribute }}:
                        type: string
                      ${{ values.skAttribute }}:
                        type: string
                      id:
                        type: string
                      name:
                        type: string
                      updatedAt:
                        type: string
                        format: date-time
                      version:
                        type: number
            '404':
              description: ${{ values.entityName }} no encontrado
        delete:
          summary: Eliminar ${{ values.entityName | lower }}
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: string
              example: "123"
          responses:
            '204':
              description: ${{ values.entityName }} eliminado exitosamente
            '404':
              description: ${{ values.entityName }} no encontrado
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      error:
                        type: string
                        example: "NotFound"
                      message:
                        type: string
                        example: "${{ values.entityName }} not found"